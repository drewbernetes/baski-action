name: 'Openstack Kube Image Builder'
description: 'Uses an Openstack cloud to build images for Kubernetes using the eschercloudai/image-builder repo.'
branding:
  icon: layers
  color: purple
inputs:
  os-auth-url:
    description: "The authentication endpoint of OpenStack to send requests to."
    required: true
  os-username:
    description: "The username to authenticate with - required if not using application credentials."
    required: false
  os-password:
    description: "The password to authenticate with - required if not using application credentials."
    required: false
  os-application-credential-id:
    description: "The application credential id to authenticate with - required if not using username/password combination."
    required: false
  os-application-credential-secret:
    description: "The application credential secret to authenticate with - required if not using username/password combination."
    required: false
  os-project-name:
    description: "The name of the Openstack project."
    required: true
  os-project-id:
    description: "The ID of the Openstack project."
    required: true
  os-project-domain-name:
    description: "The name of the ProjectDomainName. Default: \"default\"."
    required: false
    default: "default"
  os-user-domain-name:
    description: "The name of the UserDomainName. Default: \"Default\"."
    required: false
    default: "Default"
  os-region-name:
    description: "The name of the region to deploy to. Default: \"RegionOne\"."
    required: false
    default: "RegionOne"
  os-identity-api-version:
    description: "The Identity API Version for Openstack. Default: \"3\"."
    required: false
    default: "3"
  os-interface:
    description: "The name of the interface. Default: \"public\"."
    required: false
    default: "public"
  network-id:
    description: "The ID of the network to use to use to build the scanning system."
    required: true
  attach-config-drive:
    description: "Whether to enable to config drive in Openstack. Useful if building an instance with an external IP attached. Default: \"false\"."
    required: false
    default: "false"
  image-repo:
    description: "The to use for building Kubernetes images. Default: \"https://github.com/eschercloudai/image-builder.git\"."
    required: false
    default: "https://github.com/eschercloudai/image-builder.git"
  build-os:
    description: "The OS to build. Currently supports ubuntu-2004 and ubuntu-2204. Default: \"ubuntu-2204\"."
    required: false
    default: "ubuntu-2204"
  image-prefix:
    description: "The prefix to apply to the image name."
    required: true
  source-image-id:
    description: "The ID of the source image to use for the image build."
    required: true
  flavor-name:
    description: "The Openstack instance flavor to use to build the image."
    required: true
  use-floating-ip:
    description: "Enable to use floating IPs on the build instance. Default: \"true\"."
    required: false
    default: "true"
  floating-ip-network-name:
    description: "If using a floating IP configuration, add the network name here to which the floating IP will be acquired from. (Usually the provider network). Default: \"Internet\"."
    required: false
    default: "Internet"
  image-visibility:
    description: "Set the image visibility once it has been created. Usually required admin permissions of sorts. Ensure you have this before setting this as the whole process will fail if permissions are not set. Default: \"private\"."
    required: false
    default: "private"
  crictl-version:
    description: 'The crictl version to deploy into the image. Default: \"1.25.\".'
    required: false
    default: "1.25.0"
  k8s-version:
    description: 'The Kubernetes version to deploy into the image. Default: \"1.25.3\".'
    required: false
    default: "1.25.3"
  cni-version:
    description: 'The Kubernetes CNI version to deploy into the image. Default: \"1.2.0\".'
    required: false
    default: "1.2.0"
  extra-debs:
    description: 'A space-separated list of any additional (Debian / Ubuntu) packages to install.  Default is no extra packages.'
    required: false
    default: ""
  enable-nvidia-support:
    description: "Set to enable Nvidia support. You must have valid a license and location to install the .run file from to use this. You'll also need an instance with a GPU added to build the GPU drivers. Default: \"false\"."
    required: false
    default: "false"
  nvidia-driver-version:
    description: "The NVIDIA Driver version you are installing. This is currently only used to set the image name. Default: \"525.85.05\"."
    required: false
    default: "525.85.05"
  nvidia-bucket-endpoint:
    description: "The endpoint of the bucket from which to download the NVIDIA components."
    required: false
    default: ""
  nvidia-bucket-name:
    description: "The bucket name that the NVIDIA components are uploaded to."
    required: false
    default: ""
  nvidia-bucket-access:
    description: "The access key used to access the bucket from which to download the NVIDIA components."
    required: false
    default: ""
  nvidia-bucket-secret:
    description: "The secret key used to access the bucket from which to download the NVIDIA components."
    required: false
    default: ""
  nvidia-installer-location:
    description: "The NVIDIA installer location in the bucket - this must be acquired from NVIDIA and uploaded to your bucket."
    required: false
    default: ""
  nvidia-tok-location:
    description: "The NVIDIA .tok file location in the bucket - this must be acquired from NVIDIA and uploaded to your bucket."
    required: false
    default: ""
  gridd-feature-type:
    description: "The gridd feature type - See https://docs.nvidia.com/license-system/latest/nvidia-license-system-quick-start-guide/index.html#configuring-nls-licensed-client-on-linux for more information."
    required: false
    default: ""
  image-disk-format:
    description: "The format of the image on Openstack. Your openstack instance must support this."
    required: false
    default: "raw"
  rootfs-uuid:
    description: "The uuid of the root filesystem. Useful when booting bare metal machines in Openstack."
    required: false
    default: ""
  auto-delete-image:
    description: "Whether to delete the create image should a CVE check fail."
    required: false
    default: "true"
  skip-cve-check:
    description: "Whether to run a CVE check after the scan runs. This will cause a pipeline to fail if a vulnerability is found and meets the threshold defined in the two options below."
    required: false
    default: "false"
  max-severity-score:
    description: "The severity of CVE to check for. 0.1 - 10.0"
    required: false
    default: "7.0"
  max-severity-type:
    description: "The type of CVE Severity to check for. NONE, LOW, MEDIUM, HIGH and CRITICAL are supported."
    required: false
    default: "MEDIUM"
  vault-addr:
    description: "The endpoint address of vault from which the keys will be pulled for signing the image."
    required: false
    default: ""
  vault-token:
    description: "The token for accessing vault."
    required: false
    default: ""
  gh-token:
    description: "The GitHub project token to which the results can be pushed to for a GitHub Pages support."
    required: true
  gh-account:
    description: "The GitHub account in which the GitHub pages branch/project is. Useful if it lives in a repo you don't own - IE an org one. Defaults to username"
    required: false
  gh-pages-branch:
    description: "The branch in which the results should be pushed. Default: \"gh-pages\"."
    required: false
    default: "gh-pages"
runs:
  using: "composite"
  steps:
    - name: "Setup the clouds.yaml file"
      id: prepare_cloud
      shell: bash
      run: |
        mkdir -p ~/.config/openstack/
        export APP_CRED_ID=${{ inputs.os-application-credential-id }}
        export APP_CRED_SECRET=${{ inputs.os-application-credential-secret }}
        
        if [[ -z $APP_CRED_ID ]] || [[ -z $APP_CRED_SECRET ]]; then
          cat <<-EOF > ~/.config/openstack/clouds.yaml
          clouds:
            openstack:
              auth:
                auth_url: "${{ inputs.os-auth-url }}"
                username: "${{ inputs.os-username }}"
                password: "${{ inputs.os-password }}"
                project_id: "${{ inputs.os-project-id }}"
                project_name: "${{ inputs.os-project-name }}"
                user_domain_name: "${{ inputs.os-user-domain-name }}"
              region_name: "${{ inputs.os-region-name }}"
              interface: "${{ inputs.os-interface }}"
              identity_api_version: ${{ inputs.os-identity-api-version }}
        EOF
        else
          cat <<-EOF > ~/.config/openstack/clouds.yaml
          clouds:
            openstack:
              auth:
                auth_url: "${{ inputs.os-auth-url }}"
                application_credential_id: "${{ inputs.os-application-credential-id }}"
                application_credential_secret: "${{ inputs.os-application-credential-secret }}"
              region_name: "${{ inputs.os-region-name }}"
              interface: " ${{ inputs.os-interface }}"
              identity_api_version: ${{ inputs.os-identity-api-version }}
              auth_type: "v3applicationcredential"
        EOF
        fi
    - name: "Fetch Baski"
      if: runner.os == 'Linux'
      id: fetch_baski
      env:
        BASKI_VERSION: "v0.0.5-beta.1"
      run: |
        wget -q https://github.com/eschercloudai/baski/releases/download/${BASKI_VERSION}/baski-linux-amd64 -O baski
        chmod +x baski
      shell: bash
    - name: "Build Image"
      if: runner.os == 'Linux'
      id: build
      run: |
        cat <<-EOF > /tmp/baski.yaml
        clouds-file: "~/.config/openstack/clouds.yaml"
        cloud-name: "openstack"
        build:
          verbose: true
          build-os: "${{ inputs.build-os }}"
          image-prefix: "${{ inputs.image-prefix }}
          image-repo:  "${{ inputs.image-repo }}"
          network-id: "${{ inputs.network-id }}"
          source-image: "${{ inputs.source-image-id }}"
          flavor-name: "${{ inputs.flavor-name }}"
          use-floating-ip: "${{ inputs.use-floating-ip }}"
          floating-ip-network-name: "${{ inputs.floating-ip-network-name }}"
          attach-config-drive: ${{ inputs.attach-config-drive }}
          image-visibility: "${{ inputs.image-visibility }}"
          crictl-version: "${{ inputs.crictl-version }}"
          cni-version: "${{ inputs.cni-version }}"
          kubernetes-version: "${{ inputs.k8s-version }}"
          extra-debs: "${{ inputs.extra-debs }}"
          enable-nvidia-support: ${{ inputs.enable-nvidia-support }}
          nvidia-driver-version: "${{ inputs.nvidia-driver-version }}"
          nvidia-bucket-endpoint: "${{ inputs.nvidia-bucket-endpoint }}"
          nvidia-bucket-name: "${{ inputs.nvidia-bucket-name }}"
          nvidia-bucket-access: "${{ inputs.nvidia-bucket-access }}"
          nvidia-bucket-secret: "${{ inputs.nvidia-bucket-secret }}"
          nvidia-installer-location: "${{ inputs.nvidia-installer-location }}"
          nvidia-tok-location: "${{ inputs.nvidia-tok-location }}"
          gridd-feature-type: ${{ inputs.gridd-feature-type }}
          image-disk-format: "${{ inputs.image-disk-format }}"
          rootfs-uuid: "${{ inputs.rootfs-uuid }}"
        EOF
        ./baski build
        echo "new-image-id=$(cat /tmp/imgid.out)" >> $GITHUB_OUTPUT
      shell: bash

    - name: "Scan Image"
      if: runner.os == 'Linux'
      id: scan
      run: |
        cat <<-EOF > /tmp/baski.yaml
        clouds-file: "~/.config/openstack/clouds.yaml"
        cloud-name: "openstack"
        scan:
          image-id: "${{ steps.build.outputs.new-image-id }}"
          flavor-name: "${{ inputs.flavor-name }}"
          network-id: "${{ inputs.network-id }}"
          attach-config-drive: ${{ inputs.attach-config-drive }}
          auto-delete-image: ${{ inputs.auto-delete-image }}
          skip-cve-check: ${{ inputs.skip-cve-check }}
          max-severity-score: ${{ inputs.max-severity-score }}
          max-severity-type: ${{ inputs.max-severity-type }}
        EOF
        ./baski scan
      shell: bash

    # Upload the SBOM scan results
    - name: "Upload required fixes results upon scan fail"
      uses: actions/upload-artifact@v3
      if: ${{ failure() && steps.scan.conclusion == 'failure' }}
      with:
        name: "required-fixes.json"
        path: "/tmp/required-fixes.json"

    - name: "Sign Image"
      if: runner.os == 'Linux'
      id: sign
      run: |
        cat <<-EOF > /tmp/baski.yaml
        clouds-file: "~/.config/openstack/clouds.yaml"
        cloud-name: "openstack"
        sign:
          image-id: "${{ steps.build.outputs.new-image-id }}"
          vault:
            url: "${{ inputs.vault-addr }}"
            token: "${{ inputs.vault-token }}"
        EOF
        ./baski sign image
      shell: bash

    - name: "Publish Image"
      if: runner.os == 'Linux'
      id: publish
      run: |
        cat <<-EOF > /tmp/baski.yaml
        clouds-file: "~/.config/openstack/clouds.yaml"
        cloud-name: "openstack"
        publish:
          image-id: "${{ steps.build.outputs.new-image-id }}"
          github:
            user: $(cut -d '/' -f 1 <<< "$GITHUB_REPOSITORY")
            project: $(cut -d '/' -f 2 <<< "$GITHUB_REPOSITORY")
            account: "${{ inputs.gh-account }}"
            token: "${{ inputs.gh-token }}"
            pages-branch: "${{ inputs.gh-pages-branch }}"
        EOF
        ./baski publish
      shell: bash
